/**
 * 
 */
package hr.fer.zemris.java.graphics.shapes;

import hr.fer.zemris.java.graphics.raster.BWRaster;

/**
 * Implements the geometric shape ellipse. Each ellipse is specified by its
 * center and horizontal and vertical radius. Circle is special form of ellipse.
 * 
 * @author Mia FiliÄ‡
 *
 */
public abstract class AbstractEllipse extends GeometricShape {
	/** x coordinate of the ellipse center. */
	int x;
	/** y coordinate of the ellipse center. */
	int y;
	/** Horizontal radius. */
	int rx;
	/** Vertical radius. */
	int ry;

	/**
	 * Constructor that sets the properties on given values.
	 * 
	 * @param x
	 *            x coordinate of the ellipse center
	 * @param y
	 *            y coordinate of the ellipse center
	 * @param rx
	 *            Horizontal radius
	 * @param ry
	 *            Vertical radius
	 */
	public AbstractEllipse(int x, int y, int rx, int ry) {
		super();
		this.x = x;
		this.y = y;
		this.rx = rx;
		this.ry = ry;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean containsPoint(int x, int y) {
		int rySq = Math.multiplyExact(ry, ry);
		int rxSq = Math.multiplyExact(rx, rx);
		if (rySq * (x - this.x) * (x - this.x)
				+ rxSq * (y - this.y) * (y - this.y) <= rySq * rxSq) {
			return true;
		}
		return false;
	}
	
	/**
	 * {@inheritDoc}
	 */
	public void draw(BWRaster r) {
		int rasterWidth = r.getWidth();
		int rasterHeigth = r.getHeigth();
		r.disableFlipMode();
		for (int x = 0; x < rasterHeigth; ++x) {
			for (int y = 0; y < rasterWidth; ++y) {
				if (containsPoint(x, y)) {
					r.turnOn(x, y);
				}

			}
		}
	}

}
