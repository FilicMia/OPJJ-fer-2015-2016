/**
 * 
 */
package hr.fer.zemris.java.graphics.shapes;

import hr.fer.zemris.java.graphics.raster.BWRaster;

/**
 * Implements the geometric shape rectangle. Each rectangle is specified by its
 * upper left corner and its width and height.
 * 
 * @author Mia FIliÄ‡
 *
 */
public class Rectangle extends GeometricShape {
	/** x coordinate of the upper left corner of the rectangle */
	private int x;
	/** y coordinate of the upper left corner of the rectangle */
	private int y;
	/** Height of the rectangle. */
	private int height;
	/** Width of the rectangle. */
	private int width;

	/**
	 * COnstructor that sets properties of the rectangle.
	 * 
	 * @param x
	 *            x coordinate of the upper left corner of the rectangle
	 * @param y
	 *            y coordinate of the upper left corner of the rectangle
	 * @param height
	 *            Height of the rectangle.
	 * @param width
	 *            Width of the rectangle.
	 */
	public Rectangle(int x, int y, int height, int width) {
		if (height <= 0 || width <= 0) {
			throw new IllegalArgumentException(
					"Wrong secification of rectangle.");
		}
		this.x = x;
		this.y = y;
		this.height = height;
		this.width = width;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean containsPoint(int x, int y) {
		if (x < this.x)
			return false;
		if (y < this.y)
			return false;
		if (x >= this.x + this.width)
			return false;
		if (y >= this.y + this.height)
			return false;
		return true;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public void draw(BWRaster r){
		int lowerBoundWidth = Math.max(0, this.x);
		int upperBoundWidth = (this.x+this.width) > 0 ? Math.min(this.x+this.width, r.getWidth()) : 0;
		int lowerBoundHeight = Math.max(0, this.y);
		int upperBoundHeight = (this.y+this.height) > 0 ? Math.min(this.y+this.height,r.getHeigth()) : 0; 
		r.disableFlipMode();
		for (int x = lowerBoundWidth; x < upperBoundWidth; ++x) {
			for (int y = lowerBoundHeight; y < upperBoundHeight; ++y) {
				if (containsPoint(x, y)) {
					r.turnOn(x, y);
				}

			}
		}
	}

}

